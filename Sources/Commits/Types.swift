// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// List Commits
    ///
    /// Retrieves a list of commits for the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)`.
    func listCommits(_ input: Operations.ListCommits.Input) async throws -> Operations.ListCommits.Output
    /// Get Commit Details
    ///
    /// Retrieves details of a specific commit.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)`.
    func getCommit(_ input: Operations.GetCommit.Input) async throws -> Operations.GetCommit.Output
    /// Compare Commits
    ///
    /// Compares two commits in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{base}...{head}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)`.
    func compareCommits(_ input: Operations.CompareCommits.Input) async throws -> Operations.CompareCommits.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List Commits
    ///
    /// Retrieves a list of commits for the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)`.
    internal func listCommits(
        path: Operations.ListCommits.Input.Path,
        query: Operations.ListCommits.Input.Query = .init()
    ) async throws -> Operations.ListCommits.Output {
        try await listCommits(Operations.ListCommits.Input(
            path: path,
            query: query
        ))
    }
    /// Get Commit Details
    ///
    /// Retrieves details of a specific commit.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)`.
    internal func getCommit(path: Operations.GetCommit.Input.Path) async throws -> Operations.GetCommit.Output {
        try await getCommit(Operations.GetCommit.Input(path: path))
    }
    /// Compare Commits
    ///
    /// Compares two commits in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{base}...{head}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)`.
    internal func compareCommits(path: Operations.CompareCommits.Input.Path) async throws -> Operations.CompareCommits.Output {
        try await compareCommits(Operations.CompareCommits.Input(path: path))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Proxy server for GitHub repository commits.
    internal enum Server1 {
        /// Proxy server for GitHub repository commits.
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://commits.pm.fountain.coach",
                variables: []
            )
        }
    }
    /// Proxy server for GitHub repository commits.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://commits.pm.fountain.coach",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {}
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// List Commits
    ///
    /// Retrieves a list of commits for the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)`.
    internal enum ListCommits {
        internal static let id: Swift.String = "listCommits"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/repo`.
                internal var repo: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            internal var path: Operations.ListCommits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/sha`.
                internal var sha: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/path`.
                internal var path: Swift.String?
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/author`.
                internal var author: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - path:
                ///   - author:
                internal init(
                    sha: Swift.String? = nil,
                    path: Swift.String? = nil,
                    author: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.path = path
                    self.author = author
                }
            }
            internal var query: Operations.ListCommits.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            internal init(
                path: Operations.ListCommits.Input.Path,
                query: Operations.ListCommits.Input.Query = .init()
            ) {
                self.path = path
                self.query = query
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// List of commits retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListCommits.Output.Ok)
            /// List of commits retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ListCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ListCommits.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.ListCommits.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get Commit Details
    ///
    /// Retrieves details of a specific commit.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)`.
    internal enum GetCommit {
        internal static let id: Swift.String = "getCommit"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{sha}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{sha}/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{sha}/GET/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{sha}/GET/path/sha`.
                internal var sha: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - sha:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    sha: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.sha = sha
                }
            }
            internal var path: Operations.GetCommit.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.GetCommit.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Commit details retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetCommit.Output.Ok)
            /// Commit details retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetCommit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetCommit.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetCommit.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Commit not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetCommit.Output.NotFound)
            /// Commit not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetCommit.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Compare Commits
    ///
    /// Compares two commits in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{base}...{head}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)`.
    internal enum CompareCommits {
        internal static let id: Swift.String = "compareCommits"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{base}...{head}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{base}...{head}/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{base}...{head}/GET/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{base}...{head}/GET/path/base`.
                internal var base: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{base}...{head}/GET/path/head`.
                internal var head: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - base:
                ///   - head:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    base: Swift.String,
                    head: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.base = base
                    self.head = head
                }
            }
            internal var path: Operations.CompareCommits.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.CompareCommits.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Comparison retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CompareCommits.Output.Ok)
            /// Comparison retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.CompareCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CompareCommits.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.CompareCommits.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Commit not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.CompareCommits.Output.NotFound)
            /// Commit not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.CompareCommits.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
