// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
extension APIProtocol {
    /// Registers each operation handler with the provided transport.
    /// - Parameters:
    ///   - transport: A transport to which to register the operation handlers.
    ///   - serverURL: A URL used to determine the path prefix for registered
    ///   request handlers.
    ///   - configuration: A set of configuration values for the server.
    ///   - middlewares: A list of middlewares to call before the handler.
    internal func registerHandlers(
        on transport: any ServerTransport,
        serverURL: Foundation.URL = .defaultOpenAPIServerURL,
        configuration: Configuration = .init(),
        middlewares: [any ServerMiddleware] = []
    ) throws {
        let server = UniversalServer(
            serverURL: serverURL,
            handler: self,
            configuration: configuration,
            middlewares: middlewares
        )
        try transport.register(
            {
                try await server.listCommits(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/commits")
        )
        try transport.register(
            {
                try await server.getCommit(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/commits/{sha}")
        )
        try transport.register(
            {
                try await server.compareCommits(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/repos/{owner}/{repo}/compare/{base}...{head}")
        )
    }
}

fileprivate extension UniversalServer where APIHandler: APIProtocol {
    /// List Commits
    ///
    /// Retrieves a list of commits for the specified repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(listCommits)`.
    func listCommits(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.ListCommits.id,
            using: {
                APIHandler.listCommits($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.ListCommits.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    )
                )
                let query: Operations.ListCommits.Input.Query = .init(
                    sha: try converter.getOptionalQueryItemAsURI(
                        in: request.soar_query,
                        style: .form,
                        explode: true,
                        name: "sha",
                        as: Swift.String.self
                    ),
                    path: try converter.getOptionalQueryItemAsURI(
                        in: request.soar_query,
                        style: .form,
                        explode: true,
                        name: "path",
                        as: Swift.String.self
                    ),
                    author: try converter.getOptionalQueryItemAsURI(
                        in: request.soar_query,
                        style: .form,
                        explode: true,
                        name: "author",
                        as: Swift.String.self
                    )
                )
                return Operations.ListCommits.Input(
                    path: path,
                    query: query
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Get Commit Details
    ///
    /// Retrieves details of a specific commit.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{sha}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{sha}/get(getCommit)`.
    func getCommit(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.GetCommit.id,
            using: {
                APIHandler.getCommit($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.GetCommit.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    ),
                    sha: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "sha",
                        as: Swift.String.self
                    )
                )
                return Operations.GetCommit.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Compare Commits
    ///
    /// Compares two commits in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{base}...{head}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{base}...{head}/get(compareCommits)`.
    func compareCommits(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.CompareCommits.id,
            using: {
                APIHandler.compareCommits($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.CompareCommits.Input.Path = .init(
                    owner: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "owner",
                        as: Swift.String.self
                    ),
                    repo: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "repo",
                        as: Swift.String.self
                    ),
                    base: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "base",
                        as: Swift.String.self
                    ),
                    head: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "head",
                        as: Swift.String.self
                    )
                )
                return Operations.CompareCommits.Input(path: path)
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .unauthorized(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 401)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .notFound(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 404)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
}
