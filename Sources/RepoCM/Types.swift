// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Get File or Directory Content
    ///
    /// Retrieves the content of a file or directory within the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)`.
    func getFileContent(_ input: Operations.GetFileContent.Input) async throws -> Operations.GetFileContent.Output
    /// Create or Update File
    ///
    /// Creates or updates a file within the repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)`.
    func createOrUpdateFile(_ input: Operations.CreateOrUpdateFile.Input) async throws -> Operations.CreateOrUpdateFile.Output
    /// Delete File
    ///
    /// Deletes a specific file from the repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)`.
    func deleteFile(_ input: Operations.DeleteFile.Input) async throws -> Operations.DeleteFile.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get File or Directory Content
    ///
    /// Retrieves the content of a file or directory within the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)`.
    internal func getFileContent(path: Operations.GetFileContent.Input.Path) async throws -> Operations.GetFileContent.Output {
        try await getFileContent(Operations.GetFileContent.Input(path: path))
    }
    /// Create or Update File
    ///
    /// Creates or updates a file within the repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)`.
    internal func createOrUpdateFile(
        path: Operations.CreateOrUpdateFile.Input.Path,
        body: Operations.CreateOrUpdateFile.Input.Body
    ) async throws -> Operations.CreateOrUpdateFile.Output {
        try await createOrUpdateFile(Operations.CreateOrUpdateFile.Input(
            path: path,
            body: body
        ))
    }
    /// Delete File
    ///
    /// Deletes a specific file from the repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)`.
    internal func deleteFile(
        path: Operations.DeleteFile.Input.Path,
        query: Operations.DeleteFile.Input.Query
    ) async throws -> Operations.DeleteFile.Output {
        try await deleteFile(Operations.DeleteFile.Input(
            path: path,
            query: query
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Proxy server for GitHub repository files.
    internal enum Server1 {
        /// Proxy server for GitHub repository files.
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://files.pm.fountain.coach",
                variables: []
            )
        }
    }
    /// Proxy server for GitHub repository files.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://files.pm.fountain.coach",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {}
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Get File or Directory Content
    ///
    /// Retrieves the content of a file or directory within the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)`.
    internal enum GetFileContent {
        internal static let id: Swift.String = "getFileContent"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/GET/path/path`.
                internal var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - path:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            internal var path: Operations.GetFileContent.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.GetFileContent.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Content retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetFileContent.Output.Ok)
            /// Content retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetFileContent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetFileContent.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetFileContent.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Content not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetFileContent.Output.NotFound)
            /// Content not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/get(getFileContent)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetFileContent.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create or Update File
    ///
    /// Creates or updates a file within the repository.
    ///
    /// - Remark: HTTP `PUT /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)`.
    internal enum CreateOrUpdateFile {
        internal static let id: Swift.String = "createOrUpdateFile"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/path/path`.
                internal var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - path:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            internal var path: Operations.CreateOrUpdateFile.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json`.
                internal struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/message`.
                    internal var message: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/content`.
                    internal var content: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/branch`.
                    internal var branch: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/json/sha`.
                    internal var sha: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - message:
                    ///   - content:
                    ///   - branch:
                    ///   - sha:
                    internal init(
                        message: Swift.String? = nil,
                        content: Swift.String? = nil,
                        branch: Swift.String? = nil,
                        sha: Swift.String? = nil
                    ) {
                        self.message = message
                        self.content = content
                        self.branch = branch
                        self.sha = sha
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case message
                        case content
                        case branch
                        case sha
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/PUT/requestBody/content/application\/json`.
                case json(Operations.CreateOrUpdateFile.Input.Body.JsonPayload)
            }
            internal var body: Operations.CreateOrUpdateFile.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            internal init(
                path: Operations.CreateOrUpdateFile.Input.Path,
                body: Operations.CreateOrUpdateFile.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// File created successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CreateOrUpdateFile.Output.Created)
            /// File created successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.CreateOrUpdateFile.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// File updated successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateOrUpdateFile.Output.Ok)
            /// File updated successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.CreateOrUpdateFile.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CreateOrUpdateFile.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.CreateOrUpdateFile.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                internal init() {}
            }
            /// Validation failed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.CreateOrUpdateFile.Output.UnprocessableContent)
            /// Validation failed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/put(createOrUpdateFile)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            internal static var unprocessableContent: Self {
                .unprocessableContent(.init())
            }
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            internal var unprocessableContent: Operations.CreateOrUpdateFile.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete File
    ///
    /// Deletes a specific file from the repository.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/contents/{path}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)`.
    internal enum DeleteFile {
        internal static let id: Swift.String = "deleteFile"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/path/path`.
                internal var path: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - path:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    path: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.path = path
                }
            }
            internal var path: Operations.DeleteFile.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/query`.
            internal struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/query/message`.
                internal var message: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/query/sha`.
                internal var sha: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contents/{path}/DELETE/query/branch`.
                internal var branch: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - message:
                ///   - sha:
                ///   - branch:
                internal init(
                    message: Swift.String,
                    sha: Swift.String,
                    branch: Swift.String? = nil
                ) {
                    self.message = message
                    self.sha = sha
                    self.branch = branch
                }
            }
            internal var query: Operations.DeleteFile.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            internal init(
                path: Operations.DeleteFile.Input.Path,
                query: Operations.DeleteFile.Input.Query
            ) {
                self.path = path
                self.query = query
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// File deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteFile.Output.NoContent)
            /// File deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.DeleteFile.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteFile.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.DeleteFile.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// File not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteFile.Output.NotFound)
            /// File not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contents/{path}/delete(deleteFile)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.DeleteFile.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
