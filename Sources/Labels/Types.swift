// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// List Labels
    ///
    /// Retrieves a list of labels in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)`.
    func listLabels(_ input: Operations.ListLabels.Input) async throws -> Operations.ListLabels.Output
    /// Create a Label
    ///
    /// Creates a new label in the specified repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)`.
    func createLabel(_ input: Operations.CreateLabel.Input) async throws -> Operations.CreateLabel.Output
    /// Get a Label
    ///
    /// Retrieves details of a specific label by name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)`.
    func getLabel(_ input: Operations.GetLabel.Input) async throws -> Operations.GetLabel.Output
    /// Update a Label
    ///
    /// Updates an existing label.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)`.
    func updateLabel(_ input: Operations.UpdateLabel.Input) async throws -> Operations.UpdateLabel.Output
    /// Delete a Label
    ///
    /// Deletes a specific label.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)`.
    func deleteLabel(_ input: Operations.DeleteLabel.Input) async throws -> Operations.DeleteLabel.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List Labels
    ///
    /// Retrieves a list of labels in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)`.
    internal func listLabels(path: Operations.ListLabels.Input.Path) async throws -> Operations.ListLabels.Output {
        try await listLabels(Operations.ListLabels.Input(path: path))
    }
    /// Create a Label
    ///
    /// Creates a new label in the specified repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)`.
    internal func createLabel(
        path: Operations.CreateLabel.Input.Path,
        body: Operations.CreateLabel.Input.Body
    ) async throws -> Operations.CreateLabel.Output {
        try await createLabel(Operations.CreateLabel.Input(
            path: path,
            body: body
        ))
    }
    /// Get a Label
    ///
    /// Retrieves details of a specific label by name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)`.
    internal func getLabel(path: Operations.GetLabel.Input.Path) async throws -> Operations.GetLabel.Output {
        try await getLabel(Operations.GetLabel.Input(path: path))
    }
    /// Update a Label
    ///
    /// Updates an existing label.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)`.
    internal func updateLabel(
        path: Operations.UpdateLabel.Input.Path,
        body: Operations.UpdateLabel.Input.Body
    ) async throws -> Operations.UpdateLabel.Output {
        try await updateLabel(Operations.UpdateLabel.Input(
            path: path,
            body: body
        ))
    }
    /// Delete a Label
    ///
    /// Deletes a specific label.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)`.
    internal func deleteLabel(path: Operations.DeleteLabel.Input.Path) async throws -> Operations.DeleteLabel.Output {
        try await deleteLabel(Operations.DeleteLabel.Input(path: path))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Proxy server for GitHub REST API (Labels).
    internal enum Server1 {
        /// Proxy server for GitHub REST API (Labels).
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://labels.pm.fountain.coach",
                variables: []
            )
        }
    }
    /// Proxy server for GitHub REST API (Labels).
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://labels.pm.fountain.coach",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {}
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// List Labels
    ///
    /// Retrieves a list of labels in the repository.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)`.
    internal enum ListLabels {
        internal static let id: Swift.String = "listLabels"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/GET/path/repo`.
                internal var repo: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            internal var path: Operations.ListLabels.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.ListLabels.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// List of labels retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ListLabels.Output.Ok)
            /// List of labels retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.ListLabels.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.ListLabels.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/get(listLabels)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.ListLabels.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a Label
    ///
    /// Creates a new label in the specified repository.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/labels`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)`.
    internal enum CreateLabel {
        internal static let id: Swift.String = "createLabel"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/path/repo`.
                internal var repo: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            internal var path: Operations.CreateLabel.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json`.
                internal struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json/name`.
                    internal var name: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/json/color`.
                    internal var color: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name:
                    ///   - color:
                    internal init(
                        name: Swift.String? = nil,
                        color: Swift.String? = nil
                    ) {
                        self.name = name
                        self.color = color
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case name
                        case color
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/POST/requestBody/content/application\/json`.
                case json(Operations.CreateLabel.Input.Body.JsonPayload)
            }
            internal var body: Operations.CreateLabel.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            internal init(
                path: Operations.CreateLabel.Input.Path,
                body: Operations.CreateLabel.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// Creates a new `Created`.
                internal init() {}
            }
            /// Label created successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CreateLabel.Output.Created)
            /// Label created successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            internal static var created: Self {
                .created(.init())
            }
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.CreateLabel.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.CreateLabel.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.CreateLabel.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct UnprocessableContent: Sendable, Hashable {
                /// Creates a new `UnprocessableContent`.
                internal init() {}
            }
            /// Validation failed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.CreateLabel.Output.UnprocessableContent)
            /// Validation failed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/post(createLabel)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            internal static var unprocessableContent: Self {
                .unprocessableContent(.init())
            }
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            internal var unprocessableContent: Operations.CreateLabel.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a Label
    ///
    /// Retrieves details of a specific label by name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)`.
    internal enum GetLabel {
        internal static let id: Swift.String = "getLabel"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/GET/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - name:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            internal var path: Operations.GetLabel.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.GetLabel.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Label retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetLabel.Output.Ok)
            /// Label retrieved successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetLabel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetLabel.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.GetLabel.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetLabel.Output.NotFound)
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/get(getLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.GetLabel.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Update a Label
    ///
    /// Updates an existing label.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)`.
    internal enum UpdateLabel {
        internal static let id: Swift.String = "updateLabel"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - name:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            internal var path: Operations.UpdateLabel.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json`.
                internal struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json/new_name`.
                    internal var newName: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/json/color`.
                    internal var color: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - newName:
                    ///   - color:
                    internal init(
                        newName: Swift.String? = nil,
                        color: Swift.String? = nil
                    ) {
                        self.newName = newName
                        self.color = color
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case newName = "new_name"
                        case color
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/PATCH/requestBody/content/application\/json`.
                case json(Operations.UpdateLabel.Input.Body.JsonPayload)
            }
            internal var body: Operations.UpdateLabel.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - body:
            internal init(
                path: Operations.UpdateLabel.Input.Path,
                body: Operations.UpdateLabel.Input.Body
            ) {
                self.path = path
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Label updated successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UpdateLabel.Output.Ok)
            /// Label updated successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.UpdateLabel.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.UpdateLabel.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.UpdateLabel.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.UpdateLabel.Output.NotFound)
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/patch(updateLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.UpdateLabel.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Delete a Label
    ///
    /// Deletes a specific label.
    ///
    /// - Remark: HTTP `DELETE /repos/{owner}/{repo}/labels/{name}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)`.
    internal enum DeleteLabel {
        internal static let id: Swift.String = "deleteLabel"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/owner`.
                internal var owner: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/repo`.
                internal var repo: Swift.String
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/labels/{name}/DELETE/path/name`.
                internal var name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner:
                ///   - repo:
                ///   - name:
                internal init(
                    owner: Swift.String,
                    repo: Swift.String,
                    name: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.name = name
                }
            }
            internal var path: Operations.DeleteLabel.Input.Path
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            internal init(path: Operations.DeleteLabel.Input.Path) {
                self.path = path
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// Label deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteLabel.Output.NoContent)
            /// Label deleted successfully.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.DeleteLabel.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            internal struct Unauthorized: Sendable, Hashable {
                /// Creates a new `Unauthorized`.
                internal init() {}
            }
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteLabel.Output.Unauthorized)
            /// Unauthorized.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Operations.DeleteLabel.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                internal init() {}
            }
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteLabel.Output.NotFound)
            /// Label not found.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/labels/{name}/delete(deleteLabel)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.DeleteLabel.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
